- 1-Crie um trigger que, ao inserir um novo empréstimo na tabela "emprestimos", atualize automaticamente a quantidade de estoque do livro correspondente na tabela "livros", subtraindo 1.
create table Livros(
	ID int auto_increment primary key,
	titulo varchar(255), 
	autor varchar(255), 
	quantidade_estoque int
);

insert into Livros(titulo,autor,quantidade_estoque)
values("Vitoria Campeao","Colossal",4);

create table Emprestimos(
	ID int auto_increment primary key,
	id_livro int, 
	data_emprestimo date, 
	data_devolucao date,
	foreign key (id_livro) references Livros(ID)
);

DELIMITER //
CREATE TRIGGER atualizar_estoque
AFTER INSERT ON Emprestimos
FOR EACH ROW
BEGIN
    UPDATE Livros
    SET quantidade_estoque = quantidade_estoque - 1
    WHERE ID = NEW.id_livro;
END;
//
DELIMITER ;

insert into Emprestimos(id_livro,data_emprestimo,data_devolucao)
values(1,"2023-09-11","2023-12-25");

SELECT * FROM Livros;
SELECT * FROM Emprestimos;
drop database tigger;





create table Contas(
	ID int auto_increment primary key,
	nome varchar(255),
	saldo decimal(10.2)
);

insert into Contas(nome,saldo)
values("Maria",1500);

insert into Contas(nome,saldo)
values("Gundes",750);

create table Transacoes(
	ID int auto_increment primary key,
	id_conta int, 
	tipo varchar(255), 
	valor decimal(10.2),
	foreign key (id_conta) references Contas(ID)
);


DELIMITER //
CREATE TRIGGER atualiza_conta
AFTER INSERT ON Transacoes
FOR EACH ROW
BEGIN
    IF New.tipo="Entrada" THEN
    UPDATE Contas
    SET saldo = saldo + new.valor
    WHERE ID = NEW.id_conta;
    ELSE
    UPDATE Contas
    SET saldo = saldo - new.valor
    WHERE  ID = NEW.id_conta;
    END IF;
END;
//
DELIMITER ;

insert into Transacoes(id_conta,tipo,valor)
values(1,"Entrada",1000);

insert into Transacoes(id_conta,tipo,valor)
values(2,"Saída",10.00);

select * from Contas;

Create table Funcionarios(
	ID int primary key auto_increment,
	nome varchar(255),
	data_admissao date
);

DELIMITER //
CREATE TRIGGER validar_data
BEFORE INSERT ON Funcionarios
FOR EACH ROW
BEGIN
    IF NEW.data_admissao <= CURDATE()  THEN
      SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'A DATA DE ADMISSÃO TEM QUE SER MAIOR QUE A DATA ATUAL';
    END IF;
END;
//
DELIMITER ;

insert into Funcionarios(nome,data_admissao)
values("Marta","2023-02-04");


Create table Produtos(
	ID int primary key auto_increment,
	nome varchar(255),
	quantidade_estoque int
);

insert into Produtos(nome,quantidade_estoque)
values("Arvore de Natal",1);

Create table Vendas(
	ID int primary key auto_increment,
	data_venda date
);
insert into Vendas(data_venda)
values("2023-06-10");

create table Itens_venda(
	ID int primary key auto_increment,
	ID_Venda int,
	ID_Produto int,
	Quantidade int,
	foreign key (ID_venda) references Vendas(ID),
	foreign key (ID_Produto) references Produtos(ID)
);


DELIMITER //

CREATE TRIGGER verificar_estoque
BEFORE INSERT ON Itens_venda
FOR EACH ROW
BEGIN
  IF (
        SELECT quantidade_estoque
        FROM Produtos
        WHERE ID = NEW.id_produto
    ) < NEW.quantidade THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Quantidade em estoque insuficiente para o produto.';
    END IF;
END;
//
DELIMITER ;

insert into Itens_venda(ID_Venda,ID_Produto,Quantidade)
values(1,1,3);


create table Produtos(
	ID int primary key auto_increment, 
	nome varchar (255), 
	preco_unitario decimal(10.2), 
	categoria varchar(255)
);

insert into Produtos(nome,preco_unitario,categoria)
values("Blusa",2.00,"Roupas");

insert into Produtos(nome,preco_unitario,categoria)
values("Calça",10.00,"Roupas");

create table Estoque(
ID int auto_increment primary key,
ID_Produto int, 
quantidade int,
foreign key (ID_Produto) references Produtos(ID)
);

insert into Estoque(ID_Produto,quantidade)
values(1,6);

insert into Estoque(ID_Produto,quantidade)
values(2,11);

create view estoque_critico as
select P.nome as "Nome",
E.quantidade as "Quantidade"
from Produtos P
inner join Estoque E
on P.ID = E.ID_Produto
where Quantidade < 10;

select * from  estoque_critico;



